generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model Team {
  id             String          @id @default(cuid())
  slackTeamId    String          @unique
  teamName       String?
  accessToken    String
  botUserId      String?
  isActive       Boolean         @default(true)
  sendSummaryAsDM Boolean        @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  channels       Channel[]
  processedLinks ProcessedLink[]
  subscription   Subscription?
  users          User[]
  invitations    TeamInvitation[]

  @@map("teams")
}

model User {
  id               String        @id @default(cuid())
  slackUserId      String?       @unique
  teamId           String?
  name             String?
  displayName      String?
  realName         String?
  email            String?       @unique
  profileImage24   String?
  profileImage32   String?
  profileImage48   String?
  title            String?
  userAccessToken  String?
  isActive         Boolean       @default(true)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  password         String?
  emailVerified    DateTime?
  resetToken       String?       @unique
  resetTokenExpiry DateTime?
  accounts         accounts[]
  audioListens     AudioListen[]
  sessions         sessions[]
  team             Team?         @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("users")
}

model Channel {
  id             String          @id @default(cuid())
  slackChannelId String          @unique
  channelName    String?
  teamId         String
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  team           Team            @relation(fields: [teamId], references: [id], onDelete: Cascade)
  processedLinks ProcessedLink[]

  @@map("channels")
}

model ProcessedLink {
  id               String           @id @default(cuid())
  url              String
  messageTs        String
  channelId        String
  teamId           String
  title            String?
  extractedText    String?
  audioFileUrl     String?
  audioFileKey     String?
  processingStatus ProcessingStatus @default(PENDING)
  errorMessage     String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  ttsScript        String?
  ogImage          String?
  source           String?          @default("slack")
  listens          AudioListen[]
  channel          Channel          @relation(fields: [channelId], references: [id], onDelete: Cascade)
  team             Team             @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([url, messageTs, channelId])
  @@map("processed_links")
}

model Subscription {
  id                   String             @id @default(cuid())
  teamId               String             @unique
  stripeCustomerId     String?
  stripeSubscriptionId String?
  status               SubscriptionStatus @default(TRIAL)
  currentPeriodEnd     DateTime?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  planId               String             @default("free")
  monthlyLinkLimit     Int                @default(20)
  userLimit            Int                @default(1)
  team                 Team               @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model AudioListen {
  id              String        @id @default(cuid())
  processedLinkId String
  userId          String?       // Primary user identifier (database user.id)
  userAgent       String?
  ipAddress       String?
  listenedAt      DateTime      @default(now())
  completed       Boolean       @default(false)
  listenDuration  Int?
  slackUserId     String?       // Legacy field for Slack users, kept for backward compatibility
  resumePosition  Int?          @default(0)
  processedLink   ProcessedLink @relation(fields: [processedLinkId], references: [id], onDelete: Cascade)
  user            User?         @relation(fields: [userId], references: [id])

  @@map("audio_listens")
}

model QueuedJob {
  id          String    @id
  type        String
  payload     Json
  status      String    @default("PENDING")
  priority    Int       @default(1)
  retryCount  Int       @default(0)
  maxRetries  Int       @default(3)
  error       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  processedAt DateTime?

  @@index([status, priority])
  @@index([createdAt])
  @@map("queued_jobs")
}

model accounts {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  users             User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model sessions {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  users        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model verification_tokens {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TeamInvitation {
  id          String            @id @default(cuid())
  teamId      String
  email       String
  invitedBy   String?           // User ID who sent the invitation
  token       String            @unique
  status      InvitationStatus  @default(PENDING)
  expiresAt   DateTime
  acceptedAt  DateTime?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  team        Team              @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, email])
  @@map("team_invitations")
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  REVOKED
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PAST_DUE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  UNPAID
}
