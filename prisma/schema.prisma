generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model accounts {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  users             users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model audio_listens {
  id              String          @id
  processedLinkId String
  userId          String?
  userAgent       String?
  ipAddress       String?
  listenedAt      DateTime        @default(now())
  completed       Boolean         @default(false)
  listenDuration  Int?
  slackUserId     String?
  resumePosition  Int?            @default(0)
  processed_links processed_links @relation(fields: [processedLinkId], references: [id], onDelete: Cascade)
  users           users?          @relation(fields: [userId], references: [id])
}

model channels {
  id              String            @id
  slackChannelId  String            @unique
  channelName     String?
  teamId          String
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  teams           teams             @relation(fields: [teamId], references: [id], onDelete: Cascade)
  processed_links processed_links[]
}

model processed_links {
  id               String           @id
  url              String
  messageTs        String
  channelId        String
  teamId           String
  title            String?
  extractedText    String?
  audioFileUrl     String?
  audioFileKey     String?
  processingStatus ProcessingStatus @default(PENDING)
  errorMessage     String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime
  ttsScript        String?
  ogImage          String?
  source           String?          @default("slack")
  audio_listens    audio_listens[]
  channels         channels         @relation(fields: [channelId], references: [id], onDelete: Cascade)
  teams            teams            @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([url, messageTs, channelId])
}

model queued_jobs {
  id          String    @id
  type        String
  payload     Json
  status      String    @default("PENDING")
  priority    Int       @default(1)
  retryCount  Int       @default(0)
  maxRetries  Int       @default(3)
  error       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  processedAt DateTime?

  @@index([createdAt])
  @@index([status, priority])
}

model sessions {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  users        users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model subscriptions {
  id                   String             @id
  teamId               String             @unique
  stripeCustomerId     String?
  stripeSubscriptionId String?
  status               SubscriptionStatus @default(TRIAL)
  currentPeriodEnd     DateTime?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime
  planId               String             @default("free")
  monthlyLinkLimit     Int                @default(20)
  userLimit            Int                @default(1)
  teams                teams              @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model team_invitations {
  id         String           @id
  teamId     String
  email      String
  invitedBy  String?
  token      String           @unique
  status     InvitationStatus @default(PENDING)
  expiresAt  DateTime
  acceptedAt DateTime?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime
  teams      teams            @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, email])
}

model teams {
  id               String             @id
  slackTeamId      String             @unique
  teamName         String?
  accessToken      String
  botUserId        String?
  isActive         Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  sendSummaryAsDM  Boolean            @default(false)
  channels         channels[]
  processed_links  processed_links[]
  subscriptions    subscriptions?
  team_invitations team_invitations[]
  users            users[]
}

model users {
  id               String          @id
  slackUserId      String?         @unique
  teamId           String?
  name             String?
  displayName      String?
  realName         String?
  email            String?         @unique
  profileImage24   String?
  profileImage32   String?
  profileImage48   String?
  title            String?
  userAccessToken  String?
  isActive         Boolean         @default(true)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime
  password         String?
  emailVerified    DateTime?
  resetToken       String?         @unique
  resetTokenExpiry DateTime?
  accounts         accounts[]
  audio_listens    audio_listens[]
  sessions         sessions[]
  teams            teams?          @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model verification_tokens {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  REVOKED
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PAST_DUE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  UNPAID
}
