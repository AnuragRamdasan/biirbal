generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = "postgres://neondb_owner:npg_tJwRky5eIA9N@ep-flat-glade-a581mbuu-pooler.us-east-2.aws.neon.tech/neondb?sslmode=require"
  directUrl = "postgres://neondb_owner:npg_tJwRky5eIA9N@ep-flat-glade-a581mbuu-pooler.us-east-2.aws.neon.tech/neondb?sslmode=require"
}

model Team {
  id              String           @id @default(cuid())
  slackTeamId     String?          @unique
  teamName        String?
  accessToken     String?
  botUserId       String?
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  sendSummaryAsDM Boolean          @default(false)
  channels        Channel[]
  processedLinks  ProcessedLink[]
  subscription    Subscription?
  invitations     TeamInvitation[]
  memberships     TeamMembership[]

  @@map("teams")
}

model User {
  id               String           @id @default(cuid())
  name             String?
  email            String?          @unique
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  password         String?
  emailVerified    DateTime?
  resetToken       String?          @unique
  resetTokenExpiry DateTime?
  image            String?
  accounts         Account[]
  audioListens     AudioListen[]
  sessions         Session[]
  memberships      TeamMembership[]

  @@map("users")
}

model TeamMembership {
  id              String   @id @default(cuid())
  userId          String
  teamId          String
  slackUserId     String?
  displayName     String?
  realName        String?
  profileImage24  String?
  profileImage32  String?
  profileImage48  String?
  title           String?
  userAccessToken String?
  role            String   @default("member")
  isActive        Boolean  @default(true)
  joinedAt        DateTime @default(now())
  updatedAt       DateTime @updatedAt
  team            Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@unique([slackUserId, teamId])
  @@map("team_memberships")
}

model Channel {
  id             String          @id @default(cuid())
  slackChannelId String          @unique
  channelName    String?
  teamId         String
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  team           Team            @relation(fields: [teamId], references: [id], onDelete: Cascade)
  processedLinks ProcessedLink[]

  @@map("channels")
}

model ProcessedLink {
  id               String           @id @default(cuid())
  url              String
  messageTs        String
  channelId        String
  teamId           String
  title            String?
  extractedText    String?
  audioFileUrl     String?
  audioFileKey     String?
  processingStatus ProcessingStatus @default(PENDING)
  errorMessage     String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  ttsScript        String?
  ogImage          String?
  source           String?          @default("slack")
  wordCount        Int?
  listens          AudioListen[]
  channel          Channel          @relation(fields: [channelId], references: [id], onDelete: Cascade)
  team             Team             @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([url, messageTs, channelId])
  @@map("processed_links")
}

model Subscription {
  id                   String             @id @default(cuid())
  teamId               String             @unique
  stripeCustomerId     String?
  stripeSubscriptionId String?
  status               SubscriptionStatus @default(TRIAL)
  currentPeriodEnd     DateTime?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  planId               String             @default("free")
  monthlyLinkLimit     Int                @default(20)
  userLimit            Int                @default(1)
  team                 Team               @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model AudioListen {
  id              String        @id @default(cuid())
  processedLinkId String
  userId          String?
  userAgent       String?
  ipAddress       String?
  listenedAt      DateTime      @default(now())
  completed       Boolean       @default(false)
  listenDuration  Int?
  slackUserId     String?
  resumePosition  Int?          @default(0)
  processedLink   ProcessedLink @relation(fields: [processedLinkId], references: [id], onDelete: Cascade)
  user            User?         @relation(fields: [userId], references: [id])

  @@map("audio_listens")
}

model QueuedJob {
  id          String    @id
  type        String
  payload     Json
  status      String    @default("PENDING")
  priority    Int       @default(1)
  retryCount  Int       @default(0)
  maxRetries  Int       @default(3)
  error       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  processedAt DateTime?

  @@index([status, priority])
  @@index([createdAt])
  @@map("queued_jobs")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model TeamInvitation {
  id         String           @id @default(cuid())
  teamId     String
  email      String
  token      String           @unique
  status     InvitationStatus @default(PENDING)
  invitedBy  String?
  expiresAt  DateTime
  acceptedAt DateTime?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  team       Team             @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, email])
  @@map("team_invitations")
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  REVOKED
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PAST_DUE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  UNPAID
}

model FeedArticle {
  id              String   @id @default(cuid())
  title           String
  url             String   @unique
  slug            String   @unique
  extractedText   String?
  summary         String?
  audioFileUrl    String?
  audioFileKey    String?
  ogImage         String?
  author          String?
  publishedAt     DateTime
  wordCount       Int?
  source          String   @default("techmeme")
  tags            String[] @default([])
  isPublished     Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("feed_articles")
}
